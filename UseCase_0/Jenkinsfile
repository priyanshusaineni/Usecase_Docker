pipeline {
    agent any

    environment{
        PROJECT_DIR = 'Student-management-application'
    }
    stages{
        stage('Cloning Git repositories'){
            steps{
                script{
                    withCredentials([usernamePassword(
                        credentialsId: 'GIT_CRED',
                        usernameVariable: 'GIT_USERNAME',
                        passwordVariable: 'GIT_PASSWORD'
                    )]){
                        sh '''
                            mkdir -p $PROJECT_DIR
                            cd $PROJECT_DIR
                            echo "Triggered Repo is: $REPO_NAME"

                            if [ "$REPO_NAME" = "Student_management_application_backend" ]; then
                                echo "Removing existing backend repo directory (if any)..."
                                rm -rf Student_management_application_backend
                                echo "Cloning backend repo..."
                                git clone https://github.com/priyanshusaineni/Student_management_application_backend.git
                            elif [ "$REPO_NAME" = "Student_management_application_frontend" ]; then
                                echo "Removing existing frontend repo directory (if any)..."
                                rm -rf Student_management_application_frontend
                                echo "Cloning frontend repo..."
                                git clone https://github.com/priyanshusaineni/Student_management_application_frontend.git
                            else
                                echo "No matching repository to clone."
                            fi                            
                        '''
                    }
                }
                
            }
        }

        stage('Build Docker images'){
            steps{
                script{
                    sh '''
                        cd $PROJECT_DIR
                        if [ "$REPO_NAME" = "Student_management_application_backend" ]; then
                            echo "Building only Backend image ..."   
                            sudo docker build -t usecase0/backend ./Student_management_application_backend 
                        elif [ "$REPO_NAME" = "Student_management_application_frontend" ]; then
                            echo "Building only frontend image ..."
                            sudo docker build -t usecase0/frontend ./Student_management_application_frontend
                        else
                            echo "There are no updates in the repository..."
                        fi
                    '''
                }
            }
        }

        stage('Pushing Images to Docker hub'){
            steps{
                script{
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials']]) {
                        sh """
                            aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 600802700666.dkr.ecr.ap-south-1.amazonaws.com

                        if [ "$REPO_NAME" = "Student_management_application_backend" ]; then
                                docker tag usecase0/backend:latest 600802700666.dkr.ecr.ap-south-1.amazonaws.com/usecase0/backend:latest
                                docker push 600802700666.dkr.ecr.ap-south-1.amazonaws.com/usecase0/backend:latest
                        elif [ "$REPO_NAME" = "Student_management_application_frontend" ]; then
                                docker tag usecase0/frontend:latest 600802700666.dkr.ecr.ap-south-1.amazonaws.com/usecase0/frontend:latest
                                docker push 600802700666.dkr.ecr.ap-south-1.amazonaws.com/usecase0/frontend:latest
                        else
                            echo "There are no updates in the repository..."
                        fi
                        """
                    }
                    
                }
            }
        }

        stage('Deploy to EC2 (smaller instance)') {
            steps {
                withCredentials([sshUserPrivateKey(
                    credentialsId: 'ec2-smaller-instance',
                    keyFileVariable: 'KEY_FILE',
                    usernameVariable: 'INSTANCE_USER'
                )]) {
                    script {
                        sh '''
                            ssh -o StrictHostKeyChecking=no -i $KEY_FILE $INSTANCE_USER@$IP_ADDRESS "mkdir -p ~/Student-management-application/Student_management_application_frontend"
                        
                            scp -o StrictHostKeyChecking=no -i $KEY_FILE \
                            Student-management-application/Student_management_application_frontend/docker-compose.yml \
                            $INSTANCE_USER@$IP_ADDRESS:~/Student-management-application/Student_management_application_frontend/
                    
                            ssh -o StrictHostKeyChecking=no -i $KEY_FILE $INSTANCE_USER@$IP_ADDRESS " \
                                cd ~/Student-management-application/Student_management_application_frontend && \
                                aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 600802700666.dkr.ecr.ap-south-1.amazonaws.com &&\
                                docker-compose down || true && \
                                docker-compose pull &&\
                                docker-compose up -d --build \
                            "
                        '''
                    }
                }
            }
        }
    }
}